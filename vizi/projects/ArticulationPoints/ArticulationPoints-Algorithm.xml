<?xml version="1.0" encoding="WINDOWS-1251"?>

<algorithm>
	<variable
		description = "Число вершин в графе"
		name 		= "numberOfVertices"
		type		= "int"
		value		= "10"
	/>
	<variable
		description = "Матрица смежности"
		name 		= "aMatrix"
		type		= "int[][]"
		value		= "new int[10][10]"
	/>
	<variable
		description = "Массив, содержащий номера вершин при обходе графа в глубину"
		name 		= "dfnumber"
		type		= "int[]"
		value		= "new int[10]"
	/>
	<variable
		description = "Массив, содержащий значения чисел low всех вершин"
		name 		= "low"
		type		= "int[]"
		value		= "new int[10]"
	/>
	<variable
		description = "Массив, содержащий номера вершин, в том порядке, в котором они посещались"
		name 		= "way"
		type		= "int[]"
		value		= "new int[10]"
	/>
	<variable
		description = "Массив посещений"
		name		= "visited"
		type		= "boolean[]"
		value		= "new boolean[10]"
	/>
	<variable
		description = "Число посещенных вершин"
		name		= "numberOfVisited"
		type		= "int"
		value		= "0"
	/>
	<variable
		description = "Активный автомат"
		name 		= "activeAuto"
		type		= "int"
		value		= "0"
	/>
	<variable
		description = "Корень дерева обхода"
		name 		= "root"
		type		= "int"
		value		= "0"
	/>
	<variable
		description = "Точки сочленения"
		name 		= "articulationPoints"
		type		= "int[]"
		value		= "new int[10]"
	/>
	<variable
		description = "Экземпляр апплета"
		name 		= "visualizer"
		type		= "ArticulationPointsVisualizer"
		value		= "null"
	/>
	<data>
		<toString>
			StringBuffer s = new StringBuffer();
            return s.toString();
		</toString>
	</data>

	<auto id="DFS" description="Обходит граф в глубину">
		<variable
			description = "Стек"
			name		= "stack"
			type		= "int[]"
		/>
		<variable
			description = "Индекс 'головы' стека"
			name		= "head"
			type		= "int"
		/>
		<variable
			description = "Переменная цикла"
			name		= "i"
			type		= "int"
		/>
		<variable
			description = "Переменная условия выхода из цикла"
			name		= "flag"
			type		= "boolean"
		/>
		<variable
			description = "Активная вершина"
			name		= "activeVertex"
			type		= "int"
		/>

		<step
			id="startDFS"
			description="Одход в глубину"	
			comment-ru="Начинаем обход в глубину очередной компоненты связности графа. В массив dfnum будут записываться номера вершин при обходе в глубину."
			comment-en="Begin dfs"
			level="1"
		>
			<draw>
				@visualizer.updateVertex(-1);
				@visualizer.stopEditMode();
			</draw>
			<action>
				@activeAuto @= 1;
				@activeVertex @= -1;
				@stack @= new int[@numberOfVertices + 1];
				@stack[0] @= -1;
				@head @= 0;
			</action>
		</step>

		<step
			id="VisitFirst"
			description="Посещаем вершину, с которой начинаем обход и добавляем ее в стек"
			comment-ru="Начинаем обход с {0} вершины. Присваиваем вершине {0} номер 1 при обходе в глубину (dfnum[ {0} ] := 1)."
			comment-en="Start with vertex {0}"
			comment-args="new Integer(@root)"
		>
			<draw>
				@visualizer.updateVertex(@root);
			</draw>
			<action>
				@visited[@root] @= true;
				@activeVertex @= @root;
				@numberOfVisited @= 1;
				@way[@numberOfVisited - 1] @= @root;
				@dfnumber[@root] @= @numberOfVisited;
				@head @= 1;
				@stack[@head] @= @root;
			</action>
		</step>

		<while
			id="Loop"
			description="Обход дерева"
			test="@head &gt; 0"
			level="-1"
		>
			<step
				id="LoopInitI"
				description="Инициируем i и флаг"
				level="-1">
				<action>
					@i @= 0;
					@flag @= true;
				</action>
			</step>
			
			<while
				id="FindChild"
				description="Ищем следующего ребенка"
				test="@i &lt; @numberOfVertices &amp;&amp; @flag"
				level="-1"
			>
				<if
					id="IsVisited"
					description="Проверяем, была ли i-тая вершина посещена"
					test="!@visited[@i]" 
					level="-1"
				>	
					<then>

						<if
							id="IsEdge"
							description="Смотрим, есть ли ребро, соединяющее последнею найденную вершину с i-той"
							test="@aMatrix[@stack[@head]][@i] == 3 &amp;&amp; @stack[@head] != @i" 
							level="-1"
						>
							<then>
								
								<step
									id="VisitNext"
			 						description="Посещаем следующую вершину и добавляем ее в стек"
									comment-ru="Существует ребро, соединяющее вершину {0} с вершиной {1}. Добавляем вершину	{1} в дерево обхода в глубину. Присваиваем вершине {1} номер {2} при обходе в глубину (dfnum[ {1} ] := {2})."
									comment-en="Edge exists connecting vertex {0} with vertex {1}"
									comment-args="new Integer(@stack[@head-1]), new Integer(@i), new Integer(@dfnumber[@i])"
								>
									<draw>
										@visualizer.updateVertex(@i);
									</draw>
									<action>
										@visited[@i] @= true;
										@activeVertex @= @i;
										@numberOfVisited @= @numberOfVisited + 1;
										@dfnumber[@i] @= @numberOfVisited;
										@way[@numberOfVisited - 1] @= @i;
										@aMatrix[@stack[@head]][@i] @= 4;
										@head @= @head + 1;
										@stack[@head] @= @i;
										@flag @= false;
									</action>
								</step>	

							</then>
						</if> 
					</then>
				</if>

				<step
					id="IncrementI"
					description="Инкримент i"
					level="-1"
				>
					<action>
						@i @= @i + 1;
					</action>
				</step>

			</while>

			<if
				id="AreNotChilds"
				description="Условие существования потомков"
				test="@flag"
				level="-1"
			>
				<then>
					<step
						id="noChilds"
						description="Вывод комментария"
						comment-ru="У вершины {0} больше нет непосещенных соседних вершин."	
						comment-en="Vertex {0} don't have adjacent vertices"
						comment-args="new Integer(@stack[@head])"
					>
						<draw>
							@visualizer.updateVertex(@stack[@head]);
						</draw>
						<action>
							@activeVertex @= -1;
						</action>
					</step>
					
					<if
						id="lastVertex"
						description="Является ли вершина последней"
						test="@head == 1"
						level="-1"
					>
						<then>
							<step
								id="last"
								description="Вершина последняя в стеке"
								comment-ru="Вершина {0} была последней в стеке."	
								comment-en="Vertex {0} was last in stack"
								comment-args="new Integer(@stack[@head + 1])"
							>
								<draw>
									@visualizer.updateVertex(@stack[@head]);
								</draw>
								<action>
									@head @= @head - 1;
									@activeVertex @= -1;
								</action>
							</step>
						</then>
						
						<else>
							<step
								id="notLast"
								description="Вершина не последняя в стеке"
								comment-ru="Возвращаемся к вершине {0}."	
								comment-en="Return to vertex {0}"
								comment-args="new Integer(@stack[@head])"
							>
								<draw>
									@visualizer.updateVertex(@stack[@head]);
								</draw>
								<action>
									@head @= @head - 1;
									@activeVertex @= -1;
								</action>
							</step>

						</else>
					</if>			

				</then>
			</if>

		</while>
		
		<finish
			comment-ru="Обход компоненты связности графа в глубину закончен."
			comment-en="Dfs finished"
		>
		</finish>
	</auto>
	
	<auto id="findLow" description="Находим low для каждой вершины.">
		<variable
			description = "Текущая вершина"
			name		= "currentVertex"
			type		= "int"
		/>
		<variable
			description = "Переменная цикла"
			name		= "i"
			type		= "int"
		/>
		<variable
			description = "Переменная цикла"
			name		= "j"
			type		= "int"
		/>
		<variable
			description = "Активная вершина в массиве low"
			name		= "activeVertexInLow"
			type		= "int"
		/>
		<variable
			description = "Активная вершина в массиве dfnum"
			name		= "activeVertexInDfnum"
			type		= "int"
		/>
		
		<step
			id="LowLoopInitI"
			description="Инициализация i"
			comment-ru="Для каждой вершины v вычислим значение low[v], для этого обходим дерево поиска в обратном порядке (т.е. вершина с большим номером при обходе в глубину будет посещена раньше). В последствии, это значение поможет установить, является ли вершина v точкой сочленения."
			comment-en=""
			level="1"
		>
			<draw>
				@visualizer.updateVertex(-1);
			</draw>
			<action>
				@i @= @numberOfVisited - 1;
				@activeAuto @= 2;
				@activeVertexInLow @= -1;
				@activeVertexInDfnum @= -1;
				@currentVertex @= -1;
			</action>
		</step>
			
		<while
				id="BackWay"
				description="Обходим дерево поиска в обратном порядке"
				test="@i &gt;= 0"
				level="-1"
			>
			
			<step
				id="InitVariables"
				description="Инициализация переменных"
				comment-ru="Инициируем low вершины {0} ее номером при обходе в глубину (low[ {0} ] := dfnum[ {0} ])."
				comment-en="Initialize low vertex {0} by her number in dfs"
				comment-args="new Integer(@currentVertex)"
			>
				<draw>
					@visualizer.updateVertex(-1);
				</draw>
				<action>
					@j @= 0;
					@currentVertex @= @way[@i];
					@low[@currentVertex] @= @dfnumber[@currentVertex];
					@activeVertexInLow @= -1;
					@activeVertexInDfnum @= -1;
				</action>
			</step>

			<while
					id="ChildsVertex"
					description="Рассматриваем всех потомков вершины"
					test="@j &lt; @numberOfVertices"
					level="-1"
			>
				<if
					id="IsEdge"
					description="Существует ли ребро, соединяющее текущую вершину с ее ребенком в дереве поиска"
					test="@aMatrix[@currentVertex][@j] == 4"
					level="-1"
				>
					<then>

						<if
							id="ChildsLowIsLower"
							description="Low ребенка меньше, чем текущее значение low"
							test="@low[@j] &lt; @low[@currentVertex]"
							level="-1"
						>
							<then>

								<step
									id="newChild"
									description="Нашли нового ребенка"
									comment-ru="Вершина {0} - ребенок вершины {1} в дереве обхода. Low вершины {0} равно {2}. Текущее значение low у вершины {1} равно {3} ({2} &lt; {3})."
									comment-en="Vertex {0} is a child vertex {1} in dfsTree"
									comment-args="new Integer(@j), new Integer(@currentVertex), new Integer(@low[@j]), new Integer(@low[@currentVertex])" 
								>
									<draw>
										@visualizer.updateVertex(@j);
									</draw>
									<action>
										@activeVertexInLow @= @j;
										@activeVertexInDfnum @= -1;
									</action>
								</step>
								
								<step
									id="newValue1"
									description="Присваиваем low текущей вершины новое значение"
									comment-ru="Изменяем текущее значение low у вершины {1}  на значение low вершины {0} (low[ {1} ] := low[ {0} ])."
									comment-en="Change current value of low vertex {1} to low vertex {0}"
									comment-args="new Integer(@j), new Integer(@currentVertex)" 
								>
									<draw>
										@visualizer.updateVertex(@j);
									</draw>
									<action>
										@low[@currentVertex] @= @low[@j];
									</action>
								</step>

							</then>

							<else>

								<step
									id="newChild2"
									description="Нашли нового ребенка"
									comment-ru="Вершина {0} - ребенок вершины {1} в дереве обхода. Low вершины {0} равно {2}. Текущее значение low у вершины {1} равно {3}, {2} &gt;= {3}, поэтому не изменяем значение low вершины {1}."
									comment-en="Vertex {0} is a child vertex {1} in dfsTree"
									comment-args="new Integer(@j), new Integer(@currentVertex), new Integer(@low[@j]), new Integer(@low[@currentVertex])" 
								>
									<draw>
										@visualizer.updateVertex(@j);
									</draw>
									<action>
										@activeVertexInLow @= @j;
										@activeVertexInDfnum @= -1;
									</action>
								</step>

							</else>

						</if>
						
					</then>
				</if>
	
				<step
					id="LowIncJ"
					description="Инкремент j"
					level="-1"
				>
					<action>
						@j @= @j + 1;
					</action>
				</step>
			 	
			</while>

			<step
				id="InitJ"
				description="Инициализация j"
				level="-1"
			>
				<action>
					@j @= 0;
				</action>
			</step>

			<while
					id="BackEdge"
					description="Рассматриваем все обратные ребра"
					test="@j &lt; @numberOfVertices"
					level="-1"
			>
				<if
					id="IsEdge1"
					description="Существует ли обратное ребро, соединяющее текущую вершину с j-той"
					test="@aMatrix[@currentVertex][@j] == 3 &amp;&amp; @aMatrix[@j][@currentVertex] != 4 
															&amp;&amp; @dfnumber[@j] &lt; @dfnumber[@currentVertex]"
					level="-1"
				>
					<then>
						
						<if
							id="dfnumberIsLower"
							description="Номер j-той вершины при обходе меньше, чем текущее значение low"
							test="@dfnumber[@j] &lt; @low[@currentVertex]"
							level="-1"
						>
							<then>

								<step
									id="newBackEdge1"
									description="Нашли новое обратное ребро"
									comment-ru="Существует обратное ребро ({1}, {0}). Номер вершины {0} при обходе равен {2}. Текущее значение low у вершины {1} равно {3} ({2} &lt; {3})."
									comment-en="Exists back edge ({1}, {0})"
									comment-args="new Integer(@j), new Integer(@currentVertex), new Integer(@dfnumber[@j]), new Integer(@low[@currentVertex])"
								>
									<draw>
										@visualizer.updateVertex(@j);
									</draw>
									<action>
										@activeVertexInLow @= -1;
										@activeVertexInDfnum @= @j;
										@aMatrix[@currentVertex][@j] @= 10;
									</action>
								</step>

								<step
									id="newValue2"
									description="Присваиваем low текущей вершины новое значение"
									comment-ru="Изменяем текущее значение low у вершины {1}  на значение dfnum вершины {0} (low[{1}] := dfnum[{0}])."
									comment-en="Change current value of low vertex {1} to dfnum vertex {0}"
									comment-args="new Integer(@j), new Integer(@currentVertex)"
								>
									<draw>
										@visualizer.updateVertex(@j);
									</draw>
									<action>
										@low[@currentVertex] @= @dfnumber[@j];
									</action>
								</step>

								<step
									id="FLchangeEdgeStyle"
									description="Инкремент j"
									level="-1"
								>
									<action>
										@aMatrix[@currentVertex][@j] @= 3;
									</action>
								</step>

							</then>

							<else>
								
								<step
									id="newBackEdge2"
									description="Нашли новое обратное ребро"
									comment-ru="Существует обратное ребро ({1}, {0}). Номер вершины {0} при обходе равен {2}. Текущее значение low у вершины {1} равно {3}, {2} &gt;= {3}, поэтому не изменяем значение low вершины {1}."
									comment-en="Exists back edge ({1}, {0})"
									comment-args="new Integer(@j), new Integer(@currentVertex), new Integer(@dfnumber[@j]), new Integer(@low[@currentVertex])"
								>
									<draw>
										@visualizer.updateVertex(@j);
									</draw>
									<action>
										@activeVertexInLow @= -1;
										@activeVertexInDfnum @= @j;
										@aMatrix[@currentVertex][@j] @= 10;
									</action>
								</step>

								<step
									id="FLchangeEdgeStyle"
									description="Инкремент j"
									level="-1"
								>
									<action>
										@aMatrix[@currentVertex][@j] @= 3;
									</action>
								</step>

							</else>

						</if>
						
					</then>
				</if>
	
				<step
					id="LowIncJ2"
					description="Инкремент j"
					level="-1"
				>
					<action>
						@j @= @j + 1;
					</action>
				</step>
				
			</while>

			<step
				id="LowDecI"
				description="Декремент j"
				level="-1"
			>
				<action>
					@i @= @i - 1;
				</action>
			</step>

		</while>	

		<step
			id="endFindLow"
			description="Числа low для всех вершин найдены."
			comment-ru="Числа low для всех вершин из данной компоненты связности найдены."
			comment-en=""
			
		>
			<draw>
				@visualizer.updateVertex(-1);
			</draw>
			<action>
				@activeVertexInLow @= -1;
				@activeVertexInDfnum @= -1;
				@currentVertex @= -1;
			</action>
		</step>

	</auto>

	<auto id="findArticulationPoints" description="Ищет точки сочленения.">
		
		<variable
			description = "Количество детей у корня"
			name		= "childsCounter"
			type		= "int"
		/>
		<variable
			description = "Переменная цикла"
			name		= "i"
			type		= "int"
		/>
		<variable
			description = "Переменная цикла"
			name		= "j"
			type		= "int"
		/>
		<variable
			description = "Переменная условия выхода из цикла"
			name		= "flag"
			type		= "boolean"
		/>
        <variable
			description = "Активная вершина в массиве low"
			name		= "activeVertexInLow"
			type		= "int"
		/>
		<variable
			description = "Текущая вершина"
			name		= "currentVertex"
			type		= "int"
		/>

		<step
			id="FAPInitI1"
			description="Инициализация i"
			comment-ru="Поиск точек сочленения в данной компоненте связности."
			comment-en="Search articulation points"
			level="1"
		>
			<draw>
				@visualizer.updateVertex(-1);
			</draw>
			<action>
				@i @= 0;
				@activeAuto @= 3;
				@childsCounter @= 0;
				@currentVertex @= -1;
				@activeVertexInLow @= -1;
			</action>
		</step>

		<while
			id="FAPLoop1"
			description="Подсчет числа детей"
			test="@i &lt; @numberOfVertices"
			level="-1"
		>
			<if
				id="isRootsChild"
				description="Является ли i-тая вершина ребенком"
				test="@aMatrix[@root][@i] == 4"
				level="-1"
			>
				<then>
					<step
						id="Count"
						description="Инкремент счетчика детей"
						level="-1"
					>
						<action>
							@childsCounter @= @childsCounter + 1;
						</action>
					</step>
				</then>
			</if>

			<step
				id="FAPIncI"
				description="Инкремент i"
				level="-1"
			>
				<action>
					@i @= @i + 1;
				</action>
			</step>
		</while>

		<if
			id="isRootAPoint"
			description="Является ли корень дерева обхода точкой сочленения"
			test="@childsCounter &gt; 1"
			level="-1"
		>
			<then>
				<step
					id="isRootArticulationPoint"
					description="Корень является точкой сочленения"
					comment-ru="Вершина {0} - корень дерева обхода в глубину. Она является точкой сочленения, так как у нее более одного ребенка."	
					comment-en="Vertex {0} is root of dfsTree"
					comment-args="new Integer(@root)"
				>
					<draw>
						@visualizer.updateVertex(-1);
					</draw>
					<action>
						@articulationPoints[@root] @= 1;
						@visited[@root] @= false;
					</action>
				</step>
			</then>

			<else>
				<step
					id="isNotRootArticulationPoint"
					description="Корень не является точкой сочленения"
					comment-ru="Вершина {0} - корень дерева обхода в глубину. Она не является точкой сочленения, так как число ее детей меньше двух."	
					comment-en="Vertex {0} is root of dfsTree"
					comment-args="new Integer(@root)"
				>
					<draw>
						@visualizer.updateVertex(-1);
					</draw>
					<action>
						@articulationPoints[@root] @= -1;
						@visited[@root] @= false;
					</action>
				</step>
			</else>

		</if>

		<step
			id="FAPInitI2"
			description="Инициализация i"
			level="-1"
		>
			<action>
				@i @= 0;
			</action>
		</step>

		<while
			id="FAPLoop2"
			description="Обход посещенных вершин"
			test="@i &lt; @numberOfVertices"
			level="-1"
		>
			<if
				id="FAPIsVisited"
				description="Была ли i-тая вершина посещена"
				test="@visited[@i] &amp;&amp; @root != @i"
				level="-1"
			>
				<then>
					
					<step
						id="FAPInitJ"
						description="Инициализация j"
						comment-ru="Рассмотрим детей вершины {0}."
						comment-en="Look over children of vertex {0}"
						comment-args="new Integer(@i)"
					>
						<draw>
							@visualizer.updateVertex(-1);
						</draw>
						<action>
							@j @= 0;
							@flag @= false;
							@currentVertex @= @i;
						</action>
					</step>

					<while
						id="FAPLoop3"
						description="Обход детей i-той вершины"
						test="@j &lt; @numberOfVertices &amp;&amp; !@flag"
						level="-1"
					>
						<if
							id="isChild"
							description="Является ли j-тая вершина ребенком i-той вершины"
							test="@aMatrix[@i][@j] == 4"
							level="-1"
						>
							<then>
								<if
									id="isLowGreater"
									description="Условие"
									test="@low[@j] &gt;= @dfnumber[@i]"
									level="-1"
								>
									<then>
										<step
											id="isGreater"
											description="Изменяем флаг"
											comment-ru="Вершина {1} - ребенок вершины {0}. Low вершины {1} больше либо равно номеру вершины {0} при обходе (low[ {1} ] = {3}, dfnum[ {0} ] = {2})."	
											comment-en="Vertex {1} is child vertex {0}"
											comment-args="new Integer(@i), new Integer(@j), new Integer(@dfnumber[@i]), new Integer(@low[@j])"
										>

											<draw>
												@visualizer.updateVertex(@j);
											</draw>
											<action>
												@flag @= true;
												@activeVertexInLow @= @j;
											</action>
										</step>
									</then>
                        
									<else>
										<step
											id="isNotGreater"
											description="Выводим комментарий"
											comment-ru="Вершина {1} - ребенок вершины {0}. Low вершины {1} меньше номера вершины {0} при обходе (low[ {1} ] = {3}, dfnum[ {0} ] = {2}), поэтому ничего не изменяем."	
											comment-en="Vertex {1} is child vertex {0}"
											comment-args="new Integer(@i), new Integer(@j), new Integer(@dfnumber[@i]), new Integer(@low[@j])"
										>
											<draw>
												@visualizer.updateVertex(@j);
											</draw>
											<action>
												@activeVertexInLow @= @j;
											</action>
										</step>
									</else>

								</if>
							</then>
						</if>

						<step
							id="FAPIncrementJ"
							description="Инкремент j"
							level="-1"
						>
							<action>
								@j @= @j + 1;
							</action>
						</step>
		
					</while>

					<if
						id="isFlag"
						description="Был ли найден нужный ребенок"
						test="@flag"
						level="-1"
					>
						<then>
							<step
								id="isArticulationPoint"
								description="i-тая вершина точка сочленения"
								comment-ru="Значит, вершина {0} - точка сочленения."	
								comment-en="Vertex {0} is articulation point"
								comment-args="new Integer(@i)"
							>
								<draw>
									@visualizer.updateVertex(-1);
								</draw>
								<action>
									@articulationPoints[@i]	@= 1;
									@visited[@i] @= false;
									@activeVertexInLow @= -1;
									@currentVertex @= -1;
								</action>
							</step>
						</then>

						<else>
							<step
								id="isNotArticulationPoint"
								description="i-тая вершина не является точкой сочленения"
								comment-ru="У вершины {0} нет ни одного ребенка v, такого, что номер при обходе в глубину вершины {0} был бы больше, чем low[v]. Значит, вершина {0} не является точкой сочленения."	
								comment-en="Vertex {0} doesn't have good children"
								comment-args="new Integer(@i)"
							>
								<draw>
									@visualizer.updateVertex(-1);
								</draw>
								<action>
									@articulationPoints[@i]	@= -1;
									@visited[@i] @= false;
									@activeVertexInLow @= -1;
									@currentVertex @= -1;
								</action>
							</step>
						</else>
					</if>

				</then>
			</if>

			<step
				id="FAPIncrementI"
				description="Инкремент i"
				level="-1"
			>
				<action>
					@i @= @i + 1;
				</action>
			</step>

		</while>

		<step
			id="FAPInitI3"
			description="Инициализация i"
			level="-1"
		>
			<action>
				@i @= 0;
			</action>
		</step>
		
		<while
			id="FAPLoop4"
			description="Обход ребер."
			test="@i &lt; @numberOfVertices"
			level="-1"
		>
			<step
				id="FAPInitJ3"
				description="Инициализация j"
				level="-1"
			>
				<action>
					@j @= 0;
				</action>
			</step>

			<while
				id="FAPLoop5"
				description="Обход ребер."
				test="@j &lt; @numberOfVertices"
				level="-1"
			>
				<if
					id="isEdge"
					description="Есть ли ребро"
					test="@aMatrix[@i][@j] &gt; 0"
					level="-1"
				>
					<then>
						<step
							id="changeEdgeStatus"
							description="Меняем статус ребра"
							level="-1"
						>
							<action>
								@aMatrix[@i][@j] @= 3;
							</action>
						</step>
					</then>
				</if>

				<step
					id="FAPIncrementJ2"
					description="Инкремент j"
					level="-1"
				>
					<action>
						@j @= @j + 1;
					</action>
				</step>
			</while>

			<step
				id="FAPIncrementI2"
				description="Инкремент i"
				level="-1"
			>
				<action>
					@i @= @i + 1;
				</action>
			</step>

		</while>

		<step
			id="AllArticulationPointsFound"
			description="Конец данного автомата"
			comment-ru="Поиск точек сочленения в данной компоненте связности закончен."	
			comment-en="Search articularion points finished"
		>
			<draw>
				@visualizer.updateVertex(-1);
			</draw>
			<action>
			</action>
		</step>
	
	</auto>

	<auto id="findBridges" description="Ищет мосты">

		<variable
			description = "Переменная цикла"
			name		= "i"
			type		= "int"
		/>
		<variable
			description = "Переменная цикла"
			name		= "j"
			type		= "int"
		/>
		<variable
			description = "Первая активная вершина в массиве low"
			name		= "activeVertexInLow1"
			type		= "int"
		/>
		<variable
			description = "Вторая активная вершина в массиве low"
			name		= "activeVertexInLow2"
			type		= "int"
		/>
		<variable
			description = "Первая активная вершина в массиве dfnumber"
			name		= "activeVertexInDfnum1"
			type		= "int"
		/>
		<variable
			description = "Вторая активная вершина в массиве dfnumber"
			name		= "activeVertexInDfnum2"
			type		= "int"
		/>

		<step
			id="FBInitI"
			description="Инициализация i"
			comment-ru="Поиск мостов."
			comment-en="Search bridges"
			level="1"
		>
			<draw>
				@visualizer.updateVertex(-1);
			</draw>
			<action>
				@i @= 0;
				@activeAuto @= 4;
				@activeVertexInLow1 @= -1;
				@activeVertexInLow2 @= -1;
				@activeVertexInDfnum1 @= -1;
				@activeVertexInDfnum2 @= -1;
			</action>
		</step>

		<while
			id="FBLoop1"
			description="Обход вершин"
			test="@i &lt; @numberOfVertices"
			level="-1"
		>

			<step
				id="FBInitJ"
				description="Инициализация j"
				level="-1"
			>
				<action>
					@j @= @i + 1;
				</action>
			</step>
    
			<while
				id="FBLoop2"
				description="Обход вершин"
				test="@j &lt; @numberOfVertices"
				level="-1"
			>
    			
				<if
					id="FBisEdge"
					description="Существует ли ребро"
					test="@aMatrix[@i][@j] != 0"
					level="-1"
				>
					<then>

						<step
							id="LookAtEdge"
							description="Рассмотрим ребро"
							comment-ru="Рассмотрим ребро ({0}, {1})."	
							comment-en="Look over edge ({0}, {1})"
							comment-args="new Integer(@i), new Integer(@j)"
						>
							<draw>
								@visualizer.updateVertex(-1);
							</draw>
							<action>
								@aMatrix[@i][@j] @= 7;
								@aMatrix[@j][@i] @= 7;
								@activeVertexInLow1 @= -1;
								@activeVertexInLow2 @= -1;
								@activeVertexInDfnum1 @= -1;
								@activeVertexInDfnum2 @= -1;
							</action>
						</step>

						<if
							id="FBLow"
							description="Сравниваем low у вершин ребра"
							test="@low[@i] == @low[@j]"
							level="-1"
						>
							<then>
								<step
									id="NotFoundBridge1"
									description="Ребро не является мостом"
									comment-ru="Low вершин {0} и {1} равны (low[ {0} ] = low[ {1} ] = {2}). Значит, ребро ({0}, {1}) - не мост."	
									comment-en="Low vertex {0} and {1} is equal"
									comment-args="new Integer(@i), new Integer(@j), new Integer(@low[@i])"
								>
									<draw>
										@visualizer.updateVertex(-1);
									</draw>
									<action>
										@aMatrix[@i][@j] @= 3;
										@aMatrix[@j][@i] @= 3;
										@activeVertexInLow1 @= @i;
										@activeVertexInLow2 @= @j;
									</action>
								</step>

							</then>

							<else>

								<step
									id="LowNotEqual"
									description="Low вершин не равны"
									comment-ru="Low вершин {0} и {1} не равны (low[ {0} ] = {2}, low[ {1} ] = {3}). Поэтому дополнительно рассмотрим номера вершин {0} и {1} при обходе."	
									comment-en="Low vertex {0} and {1} are not equal"
									comment-args="new Integer(@i), new Integer(@j), new Integer(@low[@i]), new Integer(@low[@j])"
								>
									<draw>
										@visualizer.updateVertex(-1);
									</draw>
									<action>
										@activeVertexInLow1 @= @i;
										@activeVertexInLow2 @= @j;
									</action>
								</step>

								<if
									id="FBisDfnumGrater"
									description="Сравниваем low и dfnum у вершин ребра"
									test="@low[@i] == @dfnumber[@i] || @low[@j] == @dfnumber[@j]"
									level="-1"
								>
									<then>
										<if
											id="FBisDfnumLow"
											description="Сравниваем low и dfnum у вершин ребра"
											test="@low[@i] == @dfnumber[@i]"
											level="-1"
										>
											<then>
												<step
													id="FoundBridge1"
													description="Это ребро является мостом."
													comment-ru="Low вершины {0} равно номеру вершины {0} при обходе в глубину (low[ {0} ] = dfnum[ {0} ] = {1}). Значит, ребро ({0}, {2}) - мост."	
													comment-en="Low vertex {0} is equal dfnum vertex {0}"
													comment-args="new Integer(@i), new Integer(@low[@i]), new Integer(@j)"
												>
													<draw>
														@visualizer.updateVertex(-1);
													</draw>
													<action>
														@aMatrix[@i][@j] @= 8;
														@aMatrix[@j][@i] @= 8;
														@activeVertexInDfnum1 @= @i;
														@activeVertexInDfnum2 @= @j;
													</action>
												</step>
											</then>
											<else>
												<step
													id="FoundBridge2"
													description="Это ребро является мостом."
													comment-ru="Low вершины {0} равно номеру вершины {0} при обходе в глубину (low[ {0} ] = dfnum[ {0} ] = {1}). Значит, ребро ({2}, {0}) - мост."	
													comment-en="Low vertex {0} is equal dfnum vertex {0}"
													comment-args="new Integer(@j), new Integer(@low[@j]), new Integer(@i)"
												>
													<draw>
														@visualizer.updateVertex(-1);
													</draw>
													<action>
														@aMatrix[@i][@j] @= 8;
														@aMatrix[@j][@i] @= 8;
														@activeVertexInDfnum1 @= @i;
														@activeVertexInDfnum2 @= @j;
													</action>
												</step>
											</else>
										</if>		
									</then>
    
									<else>
    
										<step
											id="NotFoundBridge2"
											description="Ребро не является мостом."
											comment-ru="Low вершин {0} и {1} не равны номерам этих вершин при обходе соответственно. Значит, ребро ({0}, {1}) - не мост."	
											comment-en="Low vertices {0} and {1} don't equal dfnum vertices {0} and {1}"
											comment-args="new Integer(@i), new Integer(@j)"
										>
											<draw>
												@visualizer.updateVertex(-1);
											</draw>
											<action>
												@aMatrix[@i][@j] @= 3;
												@aMatrix[@j][@i] @= 3;
												@activeVertexInDfnum1 @= @i;
												@activeVertexInDfnum2 @= @j;
											</action>
										</step>
    
									</else>
								</if>
							</else>
						</if>
					</then>
				</if>

				<step
					id="FBIncrementJ"
					description="Инкремент j"
					level="-1"
				>
					<action>
						@j @= @j + 1;
					</action>
				</step>
			</while>

			<step
				id="FBIncrementI"
				description="Инкремент i"
				level="-1"
			>
				<action>
					@i @= @i + 1;
				</action>
			</step>
		</while>
		
		<step
			id="AllBridgesFound"
			description="Конец данного автомата"
			comment-ru="Поиск мостов закончен."	
			comment-en="Search bridges finished"
		>
			<draw>
				@visualizer.updateVertex(-1);
			</draw>
			<action>
				@activeVertexInLow1 @= -1;
				@activeVertexInLow2 @= -1;
				@activeVertexInDfnum1 @= -1;
				@activeVertexInDfnum2 @= -1;
			</action>
		</step>

	</auto>

	<auto id="Main" description="Ищет точки сочленения, мосты, компоненты двусвязности">

		<variable
			description = "Переменная цикла"
			name		= "i"
			type		= "int"
		/>

		<start
			comment-ru="Поиск точек сочленения и мостов."	
			comment-en="Search bridges and articulation points"
		>
			<draw>
				@visualizer.updateVertex(-1);
			</draw>
		</start>

		<step
			id="mainInitI"
			description="Инициализация i"
			level="-1"
		>
			<action>
				@i @= 0;
			</action>
		</step>
		
		<while
			id="mainLoop2"
			description="Обход непосещенных вершин."
			test="@i &lt; @numberOfVertices"
			level="-1"
		>
					
			<if
				id="isVisited"
				description="Посещалась ли вершина"
				test="@articulationPoints[@i] == 0"
				level="-1"
			>
				<then>

					<step
						id="InitVariables"
						description="Инициализация переменных"
						level="-1"
					>
						<action>
							@root @= @i;
						</action>
					</step>

					<call-auto 
						id="DFS"
						level="1"
					/>
		
					<call-auto 
						id="findLow"
						level="1"
					/>

					<call-auto 
						id="findArticulationPoints"
						level="1"
					/>

				</then>
			</if>

			<step
				id="mainIncrementI"
				description="Инкремент i"
				level="-1"
			>
				<action>
					@i @= @i + 1;
				</action>
			</step>

		</while>

		<call-auto 
			id="findBridges"
			level="1"
		/>

		<finish
			comment-ru="Поиск мостов и точек сочленения закончен."	
			comment-en="Search bridges and articulation points finished"
		>
			<draw>
				@visualizer.updateVertex(-1);
			</draw>
		</finish>

	</auto>

</algorithm>
