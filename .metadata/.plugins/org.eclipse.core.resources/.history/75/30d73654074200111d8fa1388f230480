package ru.ifmo.vizi.FarachColtonBender;

import ru.ifmo.vizi.base.Base;
import ru.ifmo.vizi.base.VisualizerParameters;
import ru.ifmo.vizi.base.ui.*;
import ru.ifmo.vizi.*;
import ru.ifmo.vizi.base.widgets.Rect;
import ru.ifmo.vizi.base.widgets.ShapeStyle;

import java.awt.*;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.util.*;

/**
 * Find maximum applet.
 * 
 * @author Georgiy Korneev
 * @version $Id: HungarianVisualizer.java,v 1.8 2006/04/05 12:05:28 geo Exp $
 */
public final class FarachColtonBenderVisualizer extends Base implements
		AdjustmentListener {
	/**
	 * Find maximum automata instance.
	 */
	private final FarachColtonBender auto;

	/**
	 * Find maximum automata data.
	 */
	private final FarachColtonBender.Data data;

	// private Rect[][] matrix, matrixConst;

	private Rect[] array;

	// private Rect[] rowChange, columnChange, localMinimum;

	private final ShapeStyle[] matrixStyleSet, linearStyleSet;

	private final AdjustablePanel size;

	private final AdjustablePanel left_border;

	private final AdjustablePanel right_border;

	private int mainWidth, windowWidth, windowHeight;
	
	/**
	 * Creates a new Find Maximum visualizer.
	 * 
	 * @param parameters
	 *            visualizer parameters.
	 */
	public FarachColtonBenderVisualizer(VisualizerParameters parameters) {
		super(parameters);
		System.err.println("!@#$%^!!!");
		auto = new FarachColtonBender(locale);
		data = auto.d;
		data.visualizer = this;

		size = new AdjustablePanel(config, "matrix-size");
		size.addAdjustmentListener(this);

		left_border = new AdjustablePanel(config, "left-border");
		left_border.addAdjustmentListener(this);

		right_border = new AdjustablePanel(config, "right-border");
		right_border.addAdjustmentListener(this);

		matrixStyleSet = ShapeStyle.loadStyleSet(config, "matrix-styleSet");
		linearStyleSet = ShapeStyle.loadStyleSet(config, "linear-styleSet");

		clientPane.setSize(2000, 1200);
		createInterface(auto);
		
		randomize();
	}

	void clear() {
		layoutClientPane(windowWidth, windowHeight);
		for (int i = 0; i < data.array.length; i++) {
			clientPane.remove(array[i]);
		}
	}

	public void adjustmentValueChanged(AdjustmentEvent t) {
		clear();
		if (t.getSource() == size) {
			auto.getController().doRestart();
			int n = t.getValue();
			data.array = new int[n];
			randomize();
		}
	}

	public void randomize() {
		int n = data.array.length;
		Random rnd = new Random();
		for (int i = 0; i < n; i++) {
			data.array[i] = (int) (Math.random() * 99) + 1;
		}
		array = new Rect[n];
		clear();
		for (int i = 0; i < n; i++) {
			array[i] = new Rect(linearStyleSet);
			array[i].setMessage(String.valueOf(data.array[i]));
			array[i].setSize(mainWidth, mainWidth);
			array[i].adjustFontSize();
			array[i].setLocation(mainWidth * i, 0);
			clientPane.add(array[i]);
		}
		auto.getController().doRestart();
	}

	/**
	 * Invoked when client pane shoud be layouted.
	 * 
	 * @param clientWidth
	 *            client pane width.
	 * @param clientHeight
	 *            client pane height.
	 */
	protected void layoutClientPane(int clientWidth, int clientHeight) {
		int n = data.array.length;

		windowHeight = clientHeight;
		windowWidth = clientWidth;

		mainWidth = (int) ((clientWidth) / (Math.round(n)));
		for (int i = 0; i < n; i++) {
			Rect now = array[i];
			if (now != null) {
				now.setSize(mainWidth, mainWidth);
				now.setBounds(i * mainWidth, 0, mainWidth, mainWidth);
				now.adjustFontSize();
			}
		}
	}

	protected Component createControlsPane() {
		Container panel = new Panel(new BorderLayout());

		Panel bottomPanel = new Panel();
		bottomPanel.add(new HintedButton(config, "button-random") {
			protected void click() {
				randomize();
			}
		});
		bottomPanel.add(size);
		bottomPanel.add(left_border);
		bottomPanel.add(right_border);
		panel.add(bottomPanel, BorderLayout.CENTER);

		panel.add(new AutoControlsPane(config, auto, forefather, false),
				BorderLayout.SOUTH);

		return panel;

	}

}
